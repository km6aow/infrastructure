---

  - name: Install Vault. This is only in snap and not apt.
    community.general.snap:
      name:
        - vault
    become: true

  - name: "Check if the vault group exists"
    ansible.builtin.getent:
      database: group
      key:      "vault"
      fail_key: false
    register: getent_output

  - debug: var=getent_output

  - name: Set whether not the vault group exists
    ansible.builtin.set_fact:
      vault_group_exists: "{{ ansible_facts.getent_group['vault'] is not none }}"

  - name: Initialize aredn_in_vault_group fact
    ansible.builtin.set_fact:
      aredn_in_vault_group:   false

  - name: Is aredn user in vault group?
    ansible.builtin.set_fact:
      aredn_in_vault_group: "{{ ansible_facts.getent_group['vault']['aredn'] is not none }}"
    when:   vault_group_exists

  - name: Add user vault group if needed
    ansible.builtin.group:
      name:     "vault"
      state:    present
    become:     true
    when:       not vault_group_exists

  - name: "Check if the vault user exists"
    ansible.builtin.getent:
      database: passwd
      key:     "vault"
      fail_key: false

  - name: Set whether not the user exists
    ansible.builtin.set_fact:
      vault_user_exists: "{{ ansible_facts.getent_group['vault'] is not none }}"

  - name: Add user vault
    ansible.builtin.user:
      name:       "vault"
      comment:    "Hashicorp Vault Account"
      groups:     "vault"
      system:     true
      shell:      "/bin/false"
      createhome: "false"
    become:       true
    when:         not vault_user_exists

  - name: Make sure the aredn user is in the vault group
    ansible.builtin.user:
      name:       "aredn"
      groups:     "vault"
      state:      present
      append:     yes
    become:       true
    when:         not aredn_in_vault_group

  - name: Make sure vault is running
    ignore_errors: true
    ansible.builtin.shell:
      cmd: "pgrep vault"
    register: vault_pid

  - set_fact:
      vault_running: false

  - set_fact:
      vault_running: true
    when: vault_pid.stdout | int > 0

  - name: Stop vault if it is running
    ansible.builtin.shell:
      cmd: "docker stop vault"
    when: vault_running == true
    become: true

  - name: Preemptive remove the container
    ignore_errors: true
    ansible.builtin.shell:
      cmd: "docker rm vault"
    become: true

  - name: Fetch or update the container
    ansible.builtin.shell:
      cmd: "docker pull hashicorp/vault"
    become: true

  - name: Make sure /vault exist
    ansible.builtin.file:
      path: "{{ item }}"
      owner: vault
      group: vault
      state: directory
      mode: u=rwx,g=rx
    become: true
    with_items:
      - /vault/config
      - /vault/data
      - /vault/file
      - /vault/logs

  - name: Install /vault/config/vault.hcl
    ansible.builtin.template:
      src:  "vault.hcl.j2"
      dest: /vault/config/vault.hcl
      owner: vault
      group: vault
    become: true

  - name: Start the container
    ansible.builtin.shell: |
        docker run --detach \
          --cap-add IPC_LOCK \
          --restart=unless-stopped \
          --publish 8200:8200 \
          --publish 8201:8201 \
          --volume=/vault:/vault \
          --volume=/vault/file:/vault/file \
          --name=vault \
          hashicorp/vault server 
    become: true

  - name: Pause to give the container enough time to start
    ansible.builtin.pause:
      echo:     false
      seconds:  5

  - name: See if the vault has been initialized
    ansible.builtin.shell: |
      vault status -address=http://127.0.0.1:8200
    register: vault_status
    failed_when: 
      - vault_status.rc == 1
      - vault_status.rc > 2

  - name: Vault Status Variable
    debug:
      var: vault_status

  - name: Set vault_initialized fact
    ansible.builtin.set_fact:
      vault_initialized:    '{{ vault_status.stdout | regex_search(".*Initialized\s+(true|false)","\1") | first | bool }}'
      vault_sealed:         '{{ vault_status.stdout | regex_search(".*Sealed\s+(true|false)","\1") | first | bool }}'

  - name: Initialize Vault if needed
    ansible.builtin.shell: |
      vault operator init -address=http://127.0.0.1:8200 
    register: vault_seal_keys
    when: not vault_initialized

  - name: Fetch Seal Keys
    ansible.builtin.set_fact:
      vault_key1:   '{{ vault_seal_keys.stdout | regex_search(".*Unseal Key 1:\s+(.*)","\1") | first }}'
      vault_key2:   '{{ vault_seal_keys.stdout | regex_search(".*Unseal Key 2:\s+(.*)","\1") | first }}'
      vault_key3:   '{{ vault_seal_keys.stdout | regex_search(".*Unseal Key 3:\s+(.*)","\1") | first }}'
      vault_token:  '{{ vault_seal_keys.stdout | regex_search(".*Token:\s+(.*)","\1") | first }}'
    when: not vault_initialized

  - name: Save Keys
    ansible.builtin.copy:
      dest:     '/vault_keys'
      content:  |
        {
          "key1":   "{{ vault_key1 }}",
          "key2":   "{{ vault_key2 }}",
          "key3":   "{{ vault_key3 }}",
          "token":  "{{ vault_token }}"
        }
    become: true
    when: not vault_initialized

  - name: Fix permissions on /vault_keys
    ansible.builtin.file:
      path: /vault_keys
      owner: root
      group: root
      mode:  u+rw
    become: true

  - name: Unseal the vault if needed
    ansible.builtin.include_tasks: unseal_vault.yml
    when: vault_sealed

  - name: Create concourse policy
    ansible.builtin.shell: |
        export VAULT_ADDR="http://{{ inventory_hostname }}:8200"
        export VAULT_TOKEN="{{ token }}"
        vault policy write concourse /vault/policies/concourse.hcl 
    become: true
    when: not vault_initialized

  - debug:
      msg: |
            If this is a new vault and you are installing Concourse, you will
            need to generate a new token for it. Do this with:
              vault token create -format=json -policy="concourse" | jq -r ".auth.client_token"
            Make sure to update the inventory with the new token prior to
            deploying Concourse.
